{
  "name": "bottleneck",
  "version": "1.1.1",
  "description": "Async rate limiter",
  "main": "lib/index.js",
  "scripts": {
    "test": "echo \"No test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/SGrondin/bottleneck"
  },
  "keywords": [
    "async rate limiter",
    "async",
    "rate limiter",
    "queues",
    "timing",
    "limiter",
    "load"
  ],
  "author": {
    "name": "Simon Grondin"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/SGrondin/bottleneck/issues"
  },
  "devDependencies": {
    "coffee-script": "1.7.x",
    "browserify": "*",
    "uglify-js": "*"
  },
  "readme": "bottleneck\n==========\n\nBottleneck is a simple and efficient Asynchronous Rate Limiter for Node.JS and the browser. When dealing with services with limited resources, it's important to ensure that they don't become overloaded. Bottleneck is the easiest solution as it doesn't add any complexity to the code.\n\nDatabases, file systems, network access, APIs, etc. are all services that can easily be overwhelmed.\n\n\n#Install\n\n__Node__\n```javascript\nnpm install bottleneck\n```\n__Browser__\n```html\n<script type=\"text/javascript\" src=\"bottleneck.min.js\"></script>\n```\n\n#Usage\n\nMost APIs have a rate limit. For example, the Reddit.com API limits programs to 1 request every 2 seconds.\n\n```javascript\nvar Bottleneck = require(\"bottleneck\"); //Node.JS only\n\n// Wait at least 2000ms between each request.\n// Never more than 1 request running at a time.\nvar limiter = new Bottleneck(1, 2000);\n```\n\n```new Bottleneck(maxNb, minTime);```\n\n* maxNb : How many requests can be running at the same time. 0 for unlimited.\n* minTime : Optional. How long to wait after launching a request before launching another one.\n\n\nInstead of doing\n```javascript\nsomeAsyncCall(arg1, arg2, argN, callback);\n```\nYou do\n```javascript\nlimiter.submit(someAsyncCall, arg1, arg2, argN, callback);\n```\nAnd now you can be assured that someAsyncCall will follow the rate guidelines!\n\nIf a callback isn't necessary, pass ```null``` instead.\n\n###stopAll\n```javascript\nlimiter.stopAll();\n```\nCancels all queued up requests and prevents additonal requests from being submitted.\n\n###changeSettings\n```javascript\nlimiter.changeSettings(maxNb, minTime)\n```\nSame parameters as the constructor, pass ```null``` to skip a parameter.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/SGrondin/bottleneck",
  "_id": "bottleneck@1.1.1",
  "_from": "bottleneck@"
}
