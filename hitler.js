// Generated by CoffeeScript 1.6.3
(function() {
  var Bottleneck, cheerio, con, filesize, found, getPage, http, nbBytes, nbLinks, nbPagesDownloaded, parsePage, rImg, start, util, visited, wikiLimiter;

  http = require("http");

  Bottleneck = require("bottleneck");

  util = require("util");

  cheerio = require("cheerio");

  filesize = require("filesize");

  con = function() {
    return util.puts(Array.prototype.slice.call(arguments, 0).map(function(a) {
      return util.inspect(a);
    }).join(" "));
  };

  Object.prototype.toArray = function() {
    return Object.keys(this);
  };

  Array.prototype.toPath = function() {
    return this.join(" -> ");
  };

  rImg = new RegExp("^\/wiki\/(?!.+?(?:[.]jpg|[.]png|[.]svg)$)", "i");

  nbPagesDownloaded = 0;

  nbBytes = 0;

  nbLinks = 0;

  visited = {};

  wikiLimiter = new Bottleneck(15, 200);

  getPage = function(addr, cb) {
    var data, req;
    data = "";
    req = http.request({
      hostname: "en.wikipedia.org",
      port: 80,
      method: "GET",
      path: addr,
      headers: {
        "user-agent": "Hitler Bot v0.1"
      }
    }, function(res) {
      res.on("data", function(chunk) {
        nbBytes += chunk.length;
        return data += chunk.toString("utf8");
      });
      return res.on("end", function() {
        return cb(null, data);
      });
    });
    req.on("error", function(err) {
      return cb(err);
    });
    return req.end();
  };

  parsePage = function(addr, depth, cb) {
    if (depth.length > 4) {
      return;
    }
    return getPage(addr, function(err, data) {
      var $, parsed;
      if (err) {
        con(err, depth.toPath());
      }
      nbPagesDownloaded++;
      $ = cheerio.load(data);
      parsed = $("a").toArray().map(function(a) {
        var href, lhref, _ref;
        href = ((_ref = a.attribs) != null ? _ref.href : void 0) || "";
        lhref = href.toLowerCase();
        if (lhref.slice(-12) === "/wiki/hitler" || lhref.slice(-18) === "/wiki/adolf_hitler") {
          found(addr, depth.concat(href));
        }
        return href;
      }).filter(function(a) {
        return rImg.test(a);
      });
      nbLinks += parsed.length;
      console.log("(" + depth.length + ") Parsed " + addr + ", " + parsed.length + " links");
      parsed.forEach(function(a) {
        if (visited[a] == null) {
          wikiLimiter.submit(parsePage, a, depth.concat(a), function() {});
          return visited[a] = true;
        }
      });
      return cb();
    });
  };

  found = function(addr, depth) {
    console.log("\n\n" + depth.toPath() + "   FOUND HITLER!!!\n" + nbPagesDownloaded + " pages (" + filesize(nbBytes) + ") downloaded\n" + nbLinks + " links found\n\n");
    return wikiLimiter.stopAll();
  };

  start = "/wiki/" + process.argv[2];

  wikiLimiter.submit(parsePage, start, [start], function() {});

}).call(this);
